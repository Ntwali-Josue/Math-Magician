{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","next","digitObj","setDigitObj","calculator","obj","button","newObj","buttonName","match","includes","parseFloat","calculate","updateState","className","undefined","returnSection","type","value","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c7679a9.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\nimport './Calculator.css';\n\nconst Calculator = () => {\n  const [digitObj, setDigitObj] = useState({\n    total: 0,\n    next: 0,\n    operation: null,\n  });\n\n  const updateState = (obj) => {\n    setDigitObj(obj);\n  };\n\n  const calculator = (obj, button) => {\n    const newObj = calculate(obj, button);\n    updateState(newObj);\n  };\n\n  const returnSection = () => {\n    const { total, next, operation } = digitObj;\n\n    if (total === null && next === null) {\n      return 0;\n    }\n    if (next !== null && total === null) {\n      return next;\n    }\n    if (total !== null && next !== null) {\n      if (operation !== null && operation !== undefined) {\n        return `${total} ${operation} ${next}`;\n      }\n      return total;\n    }\n    return total;\n  };\n\n  return (\n    <section className=\"calculator\">\n      <h1>Math Magician</h1>\n      <div className=\"return-section\">{returnSection()}</div>\n      <div className=\"digits-elts\">\n        <button type=\"button\" className=\"button-section\" value=\"AC\" onClick={() => { calculator(digitObj, 'AC'); }}>AC</button>\n        <button type=\"button\" className=\"button-section\" value=\"+/-\" onClick={() => { calculator(digitObj, '+/-'); }}>+/-</button>\n        <button type=\"button\" className=\"button-section\" value=\"%\" onClick={() => { calculator(digitObj, '%'); }}>%</button>\n        <button type=\"button\" className=\"button-section operator\" value=\"รท\" onClick={() => { calculator(digitObj, 'รท'); }}>รท</button>\n        <button type=\"button\" className=\"button-section\" value=\"7\" onClick={() => { calculator(digitObj, '7'); }}>7</button>\n        <button type=\"button\" className=\"button-section\" value=\"8\" onClick={() => { calculator(digitObj, '8'); }}>8</button>\n        <button type=\"button\" className=\"button-section\" value=\"9\" onClick={() => { calculator(digitObj, '9'); }}>9</button>\n        <button type=\"button\" className=\"button-section operator\" value=\"x\" onClick={() => { calculator(digitObj, 'x'); }}>x</button>\n        <button type=\"button\" className=\"button-section\" value=\"4\" onClick={() => { calculator(digitObj, '4'); }}>4</button>\n        <button type=\"button\" className=\"button-section\" value=\"5\" onClick={() => { calculator(digitObj, '5'); }}>5</button>\n        <button type=\"button\" className=\"button-section\" value=\"6\" onClick={() => { calculator(digitObj, '6'); }}>6</button>\n        <button type=\"button\" className=\"button-section operator\" value=\"-\" onClick={() => { calculator(digitObj, '-'); }}>-</button>\n        <button type=\"button\" className=\"button-section\" value=\"1\" onClick={() => { calculator(digitObj, '1'); }}>1</button>\n        <button type=\"button\" className=\"button-section\" value=\"2\" onClick={() => { calculator(digitObj, '2'); }}>2</button>\n        <button type=\"button\" className=\"button-section\" value=\"3\" onClick={() => { calculator(digitObj, '3'); }}>3</button>\n        <button type=\"button\" className=\"button-section operator\" value=\"+\" onClick={() => { calculator(digitObj, '+'); }}>+</button>\n      </div>\n      <span className=\"end\">\n        <button type=\"button\" className=\"button-section\" value=\"0\" onClick={() => { calculator(digitObj, '0'); }}>0</button>\n        <button type=\"button\" className=\"button-section\" value=\".\" onClick={() => { calculator(digitObj, '.'); }}>.</button>\n        <button type=\"button\" className=\"button-section operator\" value=\"=\" onClick={() => { calculator(digitObj, '='); }}>=</button>\n      </span>\n    </section>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nconst App = () => (\n  <div className=\"App\">\n    <Calculator />\n  </div>\n);\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}